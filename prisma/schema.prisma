generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum AccessType {
    // public level
    primeSeller // allow to sell and buy products in large quantity @map("retailer")

    // admin level

    createCategory // allow to create category
    updateCategory // allow to update category
    deleteCategory // allow to delete category

    createCoupon // allow to create coupon
    updateCoupon // allow to update coupon
    deleteCoupon // allow to delete coupon

    createBrand // allow to create brand
    updateBrand // allow to update brand
    deleteBrand // allow to delete brand

    createModel // allow to create model
    updateModel // allow to update model
    deleteModel // allow to delete model

    updateProduct // allow to update product
    deleteProduct // allow to delete product

    createRole // allow to create role
    updateRole // allow to update role
    deleteRole // allow to delete role

    updateUsersRole // allow to update role of user
    updateUser // allow to update user
    deleteUser // allow to delete user

    viewLogs // allow to view logs
    clearLogs // allow to clear logs

    viewReports // allow to view reports
    deleteReport // allow to delete reports

    viewAppConfiguration // allow to view app configuration
    updateAppConfiguration // allow to update app configuration

    // update types/prisma.ts when adding new access type
}

model Access {
    type AccessType @id
    Role Role[]
}

model Role {
    id       String   @id @default(cuid())
    name     String   @unique
    accesses Access[]
    users    User[]   @relation("role")

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation("roleCreate", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
    updatedBy   User?    @relation("roleUpdate", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
    createdById String
    updatedById String?
    // createdState State

    @@index([name])
    @@index([updatedById])
    @@index([createdById])
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    lastActive        DateTime?
    accounts          Account[]
    sessions          Session[]
    listedProducts    Product[] @relation("listedProducts")
    purchasedProducts Product[] @relation("purchasedProducts")
    favoriteProducts  Product[] @relation("favoriteProducts")
    wishes            Wish[]
    bids              Bid[]
    role              Role?     @relation("role", fields: [roleId], references: [id], onDelete: SetNull)
    roleId            String?
    // location
    address           Address[]
    // meta
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    // admin level
    createdCategories              Category[]               @relation("categoryCreate")
    updatedCategories              Category[]               @relation("categoryUpdate")
    createdCoupons                 Coupon[]                 @relation("couponCreate")
    updatedCoupons                 Coupon[]                 @relation("couponUpdate")
    createdFeaturedCategories      FeaturedCategory[]       @relation("featureCreate")
    updatedFeaturedCategories      FeaturedCategory[]       @relation("featureUpdate")
    createdBrands                  Brand[]                  @relation("brandCreate")
    updatedBrands                  Brand[]                  @relation("brandUpdate")
    createdModels                  Model[]                  @relation("modelCreate")
    updatedModels                  Model[]                  @relation("modelUpdate")
    updatedMultipleChoiceQuestions MultipleChoiceQuestion[] @relation("multipleChoiceQuestionUpdate")
    updatedChoice                  Choice[]                 @relation("choiceUpdate")
    updatedAtomicQuestions         AtomicQuestion[]         @relation("atomicQuestionUpdate")
    createdRoles                   Role[]                   @relation("roleCreate")
    updatedRoles                   Role[]                   @relation("roleUpdate")
    reportedProducts               Report[]
    notifications                  Notification[]
    createdConfigurations          AppConfiguration[]       @relation("configCreate")
    updatedConfigurations          AppConfiguration[]       @relation("configUpdate")

    @@index([roleId])
}

model Address {
    id           String  @id @default(cuid())
    tag          String?
    addressLine1 String
    addressLine2 String?
    city         String
    state        State
    country      String
    postalCode   String
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String

    // Meta
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([userId])
}

enum State {
    Andhra_Pradesh
    Arunachal_Pradesh
    Assam
    Bihar
    Chhattisgarh
    Goa
    Gujarat
    Haryana
    Himachal_Pradesh
    Jharkhand
    Karnataka
    Kerala
    Madhya_Pradesh
    Maharashtra
    Manipur
    Meghalaya
    Mizoram
    Nagaland
    Odisha
    Punjab
    Rajasthan
    Sikkim
    Tamil_Nadu
    Telangana
    Tripura
    Uttar_Pradesh
    Uttarakhand
    West_Bengal
}

model Category {
    id               String            @id @default(cuid())
    name             String
    slug             String            @unique
    active           Boolean           @default(true)
    price            Float
    subCategories    Category[]        @relation("SubCategory")
    parentCategory   Category?         @relation("SubCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentCategoryId String?
    wishes           Wish[]
    models           Model[]
    coupons          Coupon[]
    featuredCategory FeaturedCategory?

    // Meta
    createdState State
    createdBy    User     @relation("categoryCreate", fields: [createdById], references: [id])
    updatedBy    User?    @relation("categoryUpdate", fields: [updatedById], references: [id])
    createdById  String
    updatedById  String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([name, createdState])
    @@index([name])
    @@index([name, parentCategoryId])
    @@index([parentCategoryId])
    @@index([createdById])
    @@index([updatedById])
}

enum CouponType {
    percentage
    fixed
}

model Coupon {
    id          String     @id @default(cuid())
    code        String     @unique
    discount    Float
    type        CouponType
    active      Boolean    @default(true)
    state       State
    category    Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId  String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    createdBy   User       @relation("couponCreate", fields: [createdById], references: [id])
    updatedBy   User?      @relation("couponUpdate", fields: [updatedById], references: [id])
    createdById String
    updatedById String?
    products    Product[]

    @@index([createdById])
    @@index([updatedById])
    @@index([categoryId])
}

model FeaturedCategory {
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @unique
    image      Image    @relation(fields: [imageId], references: [publicId])
    imageId    String   @unique

    // Meta
    featuredBy   User     @relation("featureCreate", fields: [featuredById], references: [id])
    featuredById String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    updatedBy    User?    @relation("featureUpdate", fields: [updatedById], references: [id])
    updatedById  String?

    @@index([categoryId])
    @@index([featuredById])
    @@index([updatedById])
}

model Brand {
    id     String  @id @default(cuid())
    name   String
    slug   String  @unique
    active Boolean @default(true)
    models Model[]
    wishes Wish[]

    // Meta
    createdState State
    createdBy    User     @relation("brandCreate", fields: [createdById], references: [id])
    updatedBy    User?    @relation("brandUpdate", fields: [updatedById], references: [id])
    createdById  String
    updatedById  String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([name, createdState])
    @@index([name])
    @@index([createdById])
    @@index([updatedById])
}

model Model {
    id                      String                   @id @default(cuid())
    name                    String
    slug                    String                   @unique
    active                  Boolean                  @default(true)
    category                Category                 @relation(fields: [categoryId], references: [id])
    categoryId              String
    brand                   Brand                    @relation(fields: [brandId], references: [id], onDelete: Restrict)
    brandId                 String
    products                Product[]
    wishes                  Wish[]
    multipleChoiceQuestions MultipleChoiceQuestion[]
    choices                 Choice[]
    atomicQuestions         AtomicQuestion[]
    answers                 AtomicAnswer[]

    // Meta
    createdState State
    createdBy    User     @relation("modelCreate", fields: [createdById], references: [id])
    updatedBy    User?    @relation("modelUpdate", fields: [updatedById], references: [id])
    createdById  String
    updatedById  String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([name, categoryId, brandId, createdState])
    @@index([name])
    @@index([brandId])
    @@index([categoryId])
    @@index([createdById])
    @@index([updatedById])
}

enum MultipleChoiceQuestionType {
    Dropdown
    RadioGroup
    Checkbox
    Variant
}

model MultipleChoiceQuestion {
    id              String                     @id @default(cuid())
    questionContent String
    choices         Choice[]
    type            MultipleChoiceQuestionType
    required        Boolean                    @default(true)
    model           Model                      @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId         String
    // Meta

    updatedAt   DateTime @updatedAt
    updatedBy   User?    @relation("multipleChoiceQuestionUpdate", fields: [updatedById], references: [id])
    updatedById String?

    @@unique([questionContent, modelId])
    @@index([modelId])
    @@index([updatedById])
}

model Choice {
    id         String                 @id @default(cuid())
    value      String
    question   MultipleChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    model      Model                  @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String
    products   Product[]

    // Meta
    updatedAt   DateTime @updatedAt
    updatedBy   User?    @relation("choiceUpdate", fields: [updatedById], references: [id])
    updatedById String?

    @@unique([value, questionId, modelId])
    @@index([questionId])
    @@index([modelId])
    @@index([updatedById])
}

enum AtomicQuestionType {
    Text
    Paragraph
    Number
    Date
}

model AtomicQuestion {
    id              String             @id @default(cuid())
    questionContent String
    type            AtomicQuestionType
    required        Boolean            @default(true)
    answers         AtomicAnswer[]
    model           Model              @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId         String

    // Meta
    updatedAt   DateTime @updatedAt
    updatedBy   User?    @relation("atomicQuestionUpdate", fields: [updatedById], references: [id])
    updatedById String?

    @@unique([modelId, questionContent])
    @@index([modelId])
    @@index([updatedById])
}

model AtomicAnswer {
    id            String         @id @default(cuid())
    answerContent String
    question      AtomicQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId    String
    product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId     String
    model         Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId       String

    // Meta
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([questionId])
    @@index([modelId])
}

model Product {
    id              String         @id @default(cuid())
    price           Float
    title           String
    slug            String         @unique
    active          Boolean        @default(true)
    description     String
    images          Image[]
    selectedChoices Choice[]
    answers         AtomicAnswer[]
    isDeleted       Boolean        @default(false)
    address         Address?       @relation(fields: [addressId], references: [id], onDelete: Restrict)
    addressId       String?
    model           Model          @relation(fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    modelId         String
    seller          User           @relation("listedProducts", fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId        String
    buyer           User?          @relation("purchasedProducts", fields: [buyerId], references: [id], onDelete: SetNull)
    buyerId         String?
    couponCode      Coupon?        @relation(fields: [couponCodeId], references: [id], onDelete: SetNull)
    couponCodeId    String?
    favoritedUsers  User[]         @relation("favoriteProducts")
    room            Room           @relation(fields: [roomId], references: [id], onDelete: Restrict)
    roomId          String         @unique
    reports         Report[]

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([sellerId])
    @@index([modelId])
    @@index([buyerId])
    @@index([addressId])
    @@index([couponCodeId])
}

model Notification {
    id          String  @id @default(cuid())
    title       String
    description String?
    link        String?
    read        Boolean @default(false)

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())

    @@index([userId])
}

model Report {
    id          String   @id @default(cuid())
    product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([productId])
    @@index([userId])
}

model Room {
    id      String   @id @default(cuid())
    bids    Bid[]
    product Product?

    // Meta
    closedAt  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Bid {
    id     String @id @default(cuid())
    price  Float
    user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
    userId String
    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId String

    // Meta
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([roomId])
}

enum WishStatus {
    pending
    available
}

model Wish {
    id         String     @id @default(cuid())
    lowerBound Float
    upperBound Float
    category   Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String?
    brand      Brand?     @relation(fields: [brandId], references: [id], onDelete: Cascade)
    brandId    String?
    model      Model?     @relation(fields: [modelId], references: [id], onDelete: Cascade)
    modelId    String?
    status     WishStatus @default(pending)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([categoryId])
    @@index([brandId])
    @@index([modelId])
}

model Image {
    publicId         String            @id
    url              String
    secureUrl        String
    originalFilename String
    format           String
    width            Int
    height           Int
    resource_type    String // "image" | "video" | "raw" | "auto"
    category         FeaturedCategory?
    product          Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId        String?

    @@index([productId])
}

model Log {
    id        String   @id @default(cuid())
    state     State?
    message   String
    detail    String?
    level     String
    createdAt DateTime @default(now())
}

model AppConfiguration {
    key         String   @id @unique
    value       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation("configCreate", fields: [createdById], references: [id])
    updatedBy   User?    @relation("configUpdate", fields: [updatedById], references: [id])
    createdById String
    updatedById String?

    @@index([createdById])
    @@index([updatedById])
}
